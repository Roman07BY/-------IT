// Операнд – то, к чему применяется оператор. Например, в умножении 5 * 2 есть два операнда: левый операнд равен 5, а правый операнд равен 2. Иногда их называют «аргументами» вместо «операндов».


// Унарным называется оператор, который применяется к одному операнду. Например, оператор унарный минус "-" меняет знак числа на противоположный:
let x = 1;
x = -x;
console.log( `${x}` );// -1, применили унарный минус


// Бинарным называется оператор, который применяется к двум операндам. Тот же минус существует и в бинарной форме:
let y = 1, z = 3;
console.log( `${z - y }` );// 2, бинарный минус вычитает значения


// Поддерживаются следующие математические операторы:

// Сложение +,
// Вычитание -,
// Умножение *,
// Деление /,
// Взятие остатка от деления %,
// Возведение в степень **.
// Первые четыре оператора очевидны, а про % и ** стоит сказать несколько слов.

let k =12; l=7;
s=k%l; // Взятие остатка от деления %,
console.log( `${s}` );


let f =2;
f=f**3; // Возведение в степень
console.log( `${f}` );


//Обычно при помощи плюса '+' складывают числа.
//Но если бинарный оператор '+' применить к строкам, то он их объединяет в одну:

let g = "моя" + " строка";
console.log( `${g}` ); // моястрока
let e = 2 + 2 + "3";
console.log( `${e}` );//сложили две 2 и рядом записали 3 ответ 43

//Сложение и преобразование строк — это особенность бинарного плюса +. Другие арифметические операторы работают только с числами и всегда преобразуют операнды в числа.
//Например, вычитание и деление:


let r = 3 - " 5";
console.log( `${r}` ); // ответ -2


let apples = "2";
let oranges = "3";

// оба операнда предварительно преобразованы в числа
console.log( `${+apples + +oranges} `); // 5
// более длинный вариант
// alert( Number(apples) + Number(oranges) ); // 5

//Сокращённая арифметика с присваиванием
let u = 2;
u = u + 5;
u = u * 2;
console.log( `${u}` ); // 14

//Эту запись можно укоротить при помощи совмещённых операторов += и *=:

let o = 2;
o += 5; // теперь n = 7 (работает как n = n + 5)
o *= 2; // теперь n = 14 (работает как n = n * 2)
console.log( `${o}` ); // 14

//Вызов с присваиванием имеет в точности такой же приоритет, как обычное присваивание, то есть выполнится после большинства других операций:

let n = 2;
n *= 3 + 5;
console.log( `${n}` ); // 16  (сначала выполнится правая часть, выражение идентично n *= 8)

//Инкремент ++ увеличивает переменную на 1:
//Декремент -- уменьшает переменную на 1:
let counter = 2;
counter++;        // работает как counter = counter + 1, просто запись короче
console.log( `${counter}` ); // 3

//Операторы ++ и -- могут быть расположены не только после, но и до переменной.

//Когда оператор идёт после переменной — это «постфиксная форма»: counter++.
//«Префиксная форма» — это когда оператор идёт перед переменной: ++counter.
//Обе эти инструкции делают одно и то же: увеличивают counter на 1.

//Побитовые операторы:

//AND(и) ( & )
//OR(или) ( | )
//XOR(побитовое исключающее или) ( ^ )
//NOT(не) ( ~ )
//LEFT SHIFT(левый сдвиг) ( << )
//RIGHT SHIFT(правый сдвиг) ( >> )
//ZERO-FILL RIGHT SHIFT(правый сдвиг с заполнением нулями) ( >>> )