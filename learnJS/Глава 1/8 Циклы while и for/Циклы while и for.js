//Цикл «while»
//while (condition) {
	// код
	// также называемый "телом цикла"
//  }
//  Код из тела цикла выполняется, пока условие condition истинно.

//Например, цикл ниже выводит i, пока i < 3:

//  let i = 0;
//while (i < 3) { // выводит 0, затем 1, затем 2
//  alert( i );
//  i++;
//}
//Одно выполнение тела цикла по-научному называется итерация. Цикл в примере выше совершает три итерации.


//Цикл «do…while»
//Проверку условия можно разместить под телом цикла, используя специальный синтаксис do..while:

//do {
  // тело цикла
//} while (condition);
//Цикл сначала выполнит тело, а затем проверит условие condition, и пока его значение равно true, он будет выполняться снова и снова.
//Например:

//let i = 0;
//do {
//  alert( i );
//  i++;
//} while (i < 3);

//Цикл «for»
//Более сложный, но при этом самый распространённый цикл — цикл for.

//Выглядит он так:

//for (начало; условие; шаг) {
  // ... тело цикла ...
//}
//Давайте разберёмся, что означает каждая часть, на примере. Цикл ниже выполняет alert(i) для i от 0 до (но не включая) 3:

//for (let i = 0; i < 3; i++) { // выведет 0, затем 1, затем 2
//  alert(i);
//}


//Прерывание цикла: «break»
//Обычно цикл завершается при вычислении условия в false.

//Но мы можем выйти из цикла в любой момент с помощью специальной директивы break.

//Например, следующий код подсчитывает сумму вводимых чисел до тех пор, пока посетитель их вводит, а затем – выдаёт:

//let sum = 0;
//while (true) {
//  let value = +prompt("Введите число", '');
//  if (!value) break; // (*)
//  sum += value;
//}
//alert( 'Сумма: ' + sum );

//Директива break в строке (*) полностью прекращает выполнение цикла и передаёт управление на строку за его телом, то есть на alert.
//Вообще, сочетание «бесконечный цикл + break» – отличная штука для тех ситуаций, когда условие, по которому нужно прерваться, находится не в начале или конце цикла, а посередине или даже в нескольких местах его тела.


//Переход к следующей итерации: continue
//Директива continue – «облегчённая версия» break. При её выполнении цикл не прерывается, а переходит к следующей итерации (если условие все ещё равно true).

//Её используют, если понятно, что на текущем повторе цикла делать больше нечего.
//Например, цикл ниже использует continue, чтобы выводить только нечётные значения:

//for (let i = 0; i < 10; i++) {
  // если true, пропустить оставшуюся часть тела цикла
//  if (i % 2 == 0) continue;
//  alert(i); // 1, затем 3, 5, 7, 9
//}

//Для чётных значений i, директива continue прекращает выполнение тела цикла и передаёт управление на следующую итерацию for (со следующим числом). Таким образом alert вызывается только для нечётных значений.

